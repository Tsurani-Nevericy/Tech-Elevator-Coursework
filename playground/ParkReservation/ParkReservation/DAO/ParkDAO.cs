using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Text;
using System.Transactions;
using ParkReservation.Models;
using ParkReservation.Models.Database;
using Security.Models.Database;

namespace ParkReservation
{
    /// <summary>
    /// DAO class used to interact with the campground, park, reservtion, and site tables
    /// </summary>
    public class ParkDAO : IParkDAO
    {
        #region Variables

        /// <summary>
        /// SQL query that gets the last autogenerated primary key
        /// </summary>
        private const string _getLastIdSQL = "SELECT CAST(SCOPE_IDENTITY() as int);";

        /// <summary>
        /// Database connection string
        /// </summary>
        private string _connectionString;

        #endregion

        #region Constructors

        /// <summary>
        /// Constructor for the DAO
        /// </summary>
        /// <param name="connectionString">The connection string needed to connect to the park database</param>
        public ParkDAO(string connectionString)
        {
            _connectionString = connectionString;
        }

        #endregion

        #region Campground

        /// <summary>
        /// Adds a row to the campground table
        /// </summary>
        /// <param name="campground">The campground item containing the data to add</param>
        /// <returns>The autogenerated primary key</returns>
        public int AddCampground(CampgroundItem campground)
        {
            const string sql = "INSERT [campground] (park_id, name, open_from_mm, open_to_mm, daily_fee) " +
                               "VALUES (@park_id, @name, @open_from_mm, @open_to_mm, @daily_fee);";
            using (SqlConnection conn = new SqlConnection(_connectionString))
            {
                conn.Open();

                SqlCommand cmd = new SqlCommand(sql + _getLastIdSQL, conn);
                cmd.Parameters.AddWithValue("@park_id", campground.ParkId);
                cmd.Parameters.AddWithValue("@name", campground.Name);
                cmd.Parameters.AddWithValue("@open_from_mm", campground.OpenFromMonth);
                cmd.Parameters.AddWithValue("@open_to_mm", campground.OpenToMonth);
                cmd.Parameters.AddWithValue("@daily_fee", campground.DailyFee);
                campground.Id = (int)cmd.ExecuteScalar();
            }

            return campground.Id;
        }

        /// <summary>
        /// Gets all of the rows from the campground table
        /// </summary>
        /// <returns>List of campround items</returns>
        public List<CampgroundItem> GetCampgrounds(int parkId)
        {
            List<CampgroundItem> result = new List<CampgroundItem>();
            const string sql = "Select * From [campground] Where park_id = @parkId Order By name ASC;";

            using (SqlConnection conn = new SqlConnection(_connectionString))
            {
                conn.Open();
                SqlCommand cmd = new SqlCommand(sql, conn);
                cmd.Parameters.AddWithValue("parkId", parkId);

                var reader = cmd.ExecuteReader();

                while (reader.Read())
                {
                    result.Add(GetCampgroundItemFromReader(reader));
                }
            }

            return result;
        }

        /// <summary>
        /// Parses the sql result set into a campground item object
        /// </summary>
        /// <param name="reader">The sql data reader that contains the resultset</param>
        /// <returns>Populated campground item object</returns>
        private CampgroundItem GetCampgroundItemFromReader(SqlDataReader reader)
        {
            CampgroundItem item = new CampgroundItem();

            item.Id = Convert.ToInt32(reader["campground_id"]);
            item.Name = Convert.ToString(reader["name"]);
            item.ParkId = Convert.ToInt32(reader["park_id"]);
            item.OpenFromMonth = Convert.ToInt32(reader["open_from_mm"]);
            item.OpenToMonth = Convert.ToInt32(reader["open_to_mm"]);
            item.DailyFee = Convert.ToInt32(reader["daily_fee"]);

            return item;
        }

        #endregion

        #region Park

        /// <summary>
        /// Adds a row to the park table
        /// </summary>
        /// <param name="park">The park item containing the data to add</param>
        /// <returns>The autogenerated primary key</returns>
        public int AddPark(ParkItem park)
        {
            const string sql = "INSERT [park] (name, location, establish_date, area, visitors, description) " +
                               "VALUES (@name, @location, @establish_date, @area, @visitors, @description);";
            using (SqlConnection conn = new SqlConnection(_connectionString))
            {
                conn.Open();

                SqlCommand cmd = new SqlCommand(sql + _getLastIdSQL, conn);
                cmd.Parameters.AddWithValue("@name", park.Name);
                cmd.Parameters.AddWithValue("@location", park.Location);
                cmd.Parameters.AddWithValue("@establish_date", park.EstablishedDate);
                cmd.Parameters.AddWithValue("@area", park.Area);
                cmd.Parameters.AddWithValue("@visitors", park.Visitors);
                cmd.Parameters.AddWithValue("@description", park.Description);
                park.Id = (int)cmd.ExecuteScalar();
            }

            return park.Id;
        }

        /// <summary>
        /// Gets all of the rows from the park table
        /// </summary>
        /// <returns>List of park items</returns>
        public List<ParkItem> GetParks()
        {
            List<ParkItem> result = new List<ParkItem>();
            const string sql = "Select * From [park] Order By name ASC;";

            using (SqlConnection conn = new SqlConnection(_connectionString))
            {
                conn.Open();
                SqlCommand cmd = new SqlCommand(sql, conn);
                var reader = cmd.ExecuteReader();

                while (reader.Read())
                {
                    result.Add(GetParkItemFromReader(reader));
                }
            }

            return result;
        }

        /// <summary>
        /// Parses the sql result set into a park item object
        /// </summary>
        /// <param name="reader">The sql data reader that contains the resultset</param>
        /// <returns>Populated park item object</returns>
        private ParkItem GetParkItemFromReader(SqlDataReader reader)
        {
            ParkItem item = new ParkItem();

            item.Id = Convert.ToInt32(reader["park_id"]);
            item.Name = Convert.ToString(reader["name"]);
            item.Location = Convert.ToString(reader["location"]);
            item.EstablishedDate = Convert.ToDateTime(reader["establish_date"]);
            item.Area = Convert.ToInt32(reader["area"]);
            item.Visitors = Convert.ToInt32(reader["visitors"]);
            item.Description = Convert.ToString(reader["description"]);

            return item;
        }

        #endregion

        #region Reservation

        /// <summary>
        /// Gets all the reservations for a given park from the current date to 30 days in the future
        /// </summary>
        /// <param name="parkId">The park id used to get reservations for</param>
        /// <returns>List of reservation history items</returns>
        public List<ReservationHistory> GetReservationsForNext30Days(int parkId)
        {
            List<ReservationHistory> result = new List<ReservationHistory>();

            const string sql = "Select[reservation].*, [campground].name as 'CampgroundName' From[reservation] " +
                               "Join[site] On[site].site_id = [reservation].site_id " +
                               "Join[campground] On[campground].campground_id = [site].campground_id " +
                               "Join[park] On[park].park_id = [campground].park_id " +
                               "Where[reservation].from_date > @FromDate And[reservation].from_date < @ToDate And[park].park_id = @ParkId " +
                               "Order By[reservation].from_date ASC;";

            using (SqlConnection conn = new SqlConnection(_connectionString))
            {
                conn.Open();
                SqlCommand cmd = new SqlCommand(sql, conn);
                cmd.Parameters.AddWithValue("ParkId", parkId);
                cmd.Parameters.AddWithValue("FromDate", DateTime.Now);
                cmd.Parameters.AddWithValue("ToDate", DateTime.Now + new TimeSpan(30,0,0,0));

                var reader = cmd.ExecuteReader();

                while (reader.Read())
                {
                    result.Add(GetReservationHistoryItemFromReader(reader));
                }
            }

            return result;
        }

        /// <summary>
        /// Gets all the reservations for a given user
        /// </summary>
        /// <param name="userId">The user id used to get reservations for</param>
        /// <returns>List of reservation history items</returns>
        public List<ReservationHistory> GetReservationsForUserId(int userId)
        {
            List<ReservationHistory> result = new List<ReservationHistory>();

            const string sql = "Select[reservation].*, [campground].name as 'CampgroundName' From[reservation] " +
                               "Join[UserReservation] On[reservation].reservation_id = [UserReservation].ReservationId " +
                               "Join[site] On[site].site_id = [reservation].site_id " +
                               "Join[campground] On[campground].campground_id = [site].campground_id " +
                               "Where[UserReservation].UserId = @UserId " +
                               "Order By [reservation].from_date ASC;";

            using (SqlConnection conn = new SqlConnection(_connectionString))
            {
                conn.Open();
                SqlCommand cmd = new SqlCommand(sql, conn);
                cmd.Parameters.AddWithValue("UserId", userId);

                var reader = cmd.ExecuteReader();

                while (reader.Read())
                {
                    result.Add(GetReservationHistoryItemFromReader(reader));
                }
            }

            return result;
        }

        /// <summary>
        /// Parses the sql result set into a ReservationHistory item object
        /// </summary>
        /// <param name="reader">The sql data reader that contains the resultset</param>
        /// <returns>Populated ReservationHistory item object</returns>
        private ReservationHistory GetReservationHistoryItemFromReader(SqlDataReader reader)
        {
            ReservationHistory item = new ReservationHistory();

            item.Reservation.Id = Convert.ToInt32(reader["reservation_id"]);
            item.Reservation.SiteId = Convert.ToInt32(reader["site_id"]);
            item.Reservation.Name = Convert.ToString(reader["name"]);
            item.Reservation.FromDate = Convert.ToDateTime(reader["from_date"]);
            item.Reservation.ToDate = Convert.ToDateTime(reader["to_date"]);
            item.Reservation.CreatedDate = Convert.ToDateTime(reader["create_date"]);
            item.CampgroundName = Convert.ToString(reader["CampgroundName"]);

            return item;
        }

        /// <summary>
        /// Creates a reservation in the reservation table and associates it with a user
        /// </summary>
        /// <param name="item">The reservation item to be saved</param>
        /// <param name="userId">The id of the user to associate with the reservation</param>
        /// <returns>The autogenerated primary key for the reservation</returns>
        public int MakeReservation(ReservationItem reservation, int userId)
        {
            int reservationId = BaseItem.InvalidId;

            using (TransactionScope scope = new TransactionScope())
            {
                reservationId = AddReservation(reservation);
                AddUserReservation(reservationId, userId);
                scope.Complete();
            }

            return reservationId;
        }

        /// <summary>
        /// Adds a row to the reservation table
        /// </summary>
        /// <param name="item">The reservation item containing the data to add</param>
        /// <returns>The autogenerated primary key</returns>
        private int AddReservation(ReservationItem item)
        {
            const string sql = "INSERT [reservation] (site_id, name, from_date, to_date, create_date) " +
                               "VALUES (@SiteId, @Name, @FromDate, @ToDate, @CreateDate);";
            using (SqlConnection conn = new SqlConnection(_connectionString))
            {
                conn.Open();

                SqlCommand cmd = new SqlCommand(sql + _getLastIdSQL, conn);
                cmd.Parameters.AddWithValue("@SiteId", item.SiteId);
                cmd.Parameters.AddWithValue("@Name", item.Name);
                cmd.Parameters.AddWithValue("@FromDate", item.FromDate);
                cmd.Parameters.AddWithValue("@ToDate", item.ToDate);
                cmd.Parameters.AddWithValue("@CreateDate", item.CreatedDate);
                item.Id = (int)cmd.ExecuteScalar();
            }

            return item.Id;
        }

        /// <summary>
        /// Adds a row to the user reservation table
        /// </summary>
        /// <param name="reservationId">The reservation id</param>
        /// <param name="userId">The user id</param>
        /// <returns></returns>
        private int AddUserReservation(int reservationId, int userId)
        {
            int result = BaseItem.InvalidId;

            const string sql = "INSERT [UserReservation] (UserId, ReservationId) " +
                               "VALUES (@UserId, @ReservationId);";
            using (SqlConnection conn = new SqlConnection(_connectionString))
            {
                conn.Open();

                SqlCommand cmd = new SqlCommand(sql + _getLastIdSQL, conn);
                cmd.Parameters.AddWithValue("@UserId", userId);
                cmd.Parameters.AddWithValue("@ReservationId", reservationId);
                result = (int)cmd.ExecuteScalar();
            }

            return result;
        }

        #endregion

        #region Site

        /// <summary>
        /// Adds a row to the site table
        /// </summary>
        /// <param name="site">The site item containing the data to add</param>
        /// <returns>The autogenerated primary key</returns>
        public int AddSite(SiteItem site)
        {
            const string sql = "INSERT [site] (campground_id, site_number, max_occupancy, accessible, max_rv_length, utilities) " +
                               "VALUES (@campground_id, @site_number, @max_occupancy, @accessible, @max_rv_length, @utilities);";
            using (SqlConnection conn = new SqlConnection(_connectionString))
            {
                conn.Open();

                SqlCommand cmd = new SqlCommand(sql + _getLastIdSQL, conn);
                cmd.Parameters.AddWithValue("@campground_id", site.CampgroundId);
                cmd.Parameters.AddWithValue("@site_number", site.SiteNumber);
                cmd.Parameters.AddWithValue("@max_occupancy", site.MaxOccupancy);
                cmd.Parameters.AddWithValue("@accessible", site.IsAccessible);
                cmd.Parameters.AddWithValue("@max_rv_length", site.MaxRvLength);
                cmd.Parameters.AddWithValue("@utilities", site.HasUtilities);
                site.Id = (int)cmd.ExecuteScalar();
            }

            return site.Id;
        }

        /// <summary>
        /// Gets all of the rows from the site table
        /// </summary>
        /// <returns>List of site items</returns>
        public List<SiteItem> GetSites(ReservationInfo info)
        {
            List<SiteItem> result = new List<SiteItem>();
            const string sql = "Select Top 5 * From [site] " +
                               "Join [campground] On [campground].campground_id = [site].campground_id " +
                               "Where [site].site_id Not In(Select [site].site_id From [site] " +
                                                    "Join [reservation] On [reservation].site_id = [site].site_id " +
                                                    "Where (Not ([reservation].to_date < @FromDate Or [reservation].from_date > @ToDate))) " +
                                     "And [site].campground_id = @CampgroundId " +
                                     "And [site].max_occupancy >= @Occupancy " +
                                     "And [site].accessible >= @IsAccessible " +
                                     "And [site].max_rv_length >= @RvLength " +
                                     "And [site].utilities >= @HasUtilities " +
                                     "And Not ([campground].open_to_mm < @EndMonth Or [campground].open_from_mm > @StartMonth)" +
                               "Order By [site].site_number;";

            using (SqlConnection conn = new SqlConnection(_connectionString))
            {
                conn.Open();
                SqlCommand cmd = new SqlCommand(sql, conn);
                cmd.Parameters.AddWithValue("CampgroundId", info.CampgroundId);
                cmd.Parameters.AddWithValue("FromDate", info.FromDate);
                cmd.Parameters.AddWithValue("ToDate", info.ToDate);
                cmd.Parameters.AddWithValue("Occupancy", info.Occupancy);
                cmd.Parameters.AddWithValue("IsAccessible", info.IsAccessible);
                cmd.Parameters.AddWithValue("RvLength", info.RvLength);
                cmd.Parameters.AddWithValue("HasUtilities", info.HasUtilities);
                cmd.Parameters.AddWithValue("StartMonth", info.FromDate.Month);
                cmd.Parameters.AddWithValue("EndMonth", info.ToDate.Month);

                var reader = cmd.ExecuteReader();

                while (reader.Read())
                {
                    result.Add(GetSiteItemFromReader(reader));
                }
            }

            return result;
        }

        /// <summary>
        /// Parses the sql result set into a site item object
        /// </summary>
        /// <param name="reader">The sql data reader that contains the resultset</param>
        /// <returns>Populated site item object</returns>
        private SiteItem GetSiteItemFromReader(SqlDataReader reader)
        {
            SiteItem item = new SiteItem();

            item.Id = Convert.ToInt32(reader["site_id"]);
            item.CampgroundId = Convert.ToInt32(reader["campground_id"]);
            item.SiteNumber = Convert.ToInt32(reader["site_number"]);
            item.MaxOccupancy = Convert.ToInt32(reader["max_occupancy"]);
            item.IsAccessible = Convert.ToBoolean(reader["accessible"]);
            item.MaxRvLength = Convert.ToInt32(reader["max_rv_length"]);
            item.HasUtilities = Convert.ToBoolean(reader["utilities"]);

            return item;
        }
        
        #endregion
    }
}
